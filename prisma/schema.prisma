generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  name       String
  email      String     @unique
  password   String
  role       UserRole   @default(CLIENT)

  client     Client?
}

model Client {
  id         Int       @id @default(autoincrement())
  userId     Int       @unique
  taxId      String
  phone      String?
  address    String?

  user       User      @relation(fields: [userId], references: [id])
  services   ClientService[]
  payments   Payment[]
}

model Service {
  id           Int             @id @default(autoincrement())
  name         String
  description  String?
  type         String
  fixedPrice   Float?

  steps        ServiceStep[]
  subscriptions ClientService[]
}

model Step {
  id           Int             @id @default(autoincrement())
  name         String

  serviceSteps ServiceStep[]
  clientSteps  ClientStep[]
}

model ServiceStep {
  id         Int      @id @default(autoincrement())
  service    Service  @relation(fields: [serviceId], references: [id])
  serviceId  Int
  step       Step     @relation(fields: [stepId], references: [id])
  stepId     Int
  order      Int
}

model ClientService {
  id             Int          @id @default(autoincrement())
  client         Client       @relation(fields: [clientId], references: [id])
  clientId       Int
  service        Service      @relation(fields: [serviceId], references: [id])
  serviceId      Int
  agreedPrice    Float?
  startDate      DateTime     @default(now())
  status         String       @default("in_progress")

  steps          ClientStep[]
  payments       Payment[]
}

model ClientStep {
  id              Int             @id @default(autoincrement())
  clientService   ClientService  @relation(fields: [clientServiceId], references: [id])
  clientServiceId Int
  step            Step           @relation(fields: [stepId], references: [id])
  stepId          Int
  completed       Boolean        @default(false)
  completedAt     DateTime?
}

model Payment {
  id              Int             @id @default(autoincrement())
  client          Client         @relation(fields: [clientId], references: [id])
  clientId        Int
  clientService   ClientService  @relation(fields: [clientServiceId], references: [id])
  clientServiceId Int
  amount          Float
  paidAt          DateTime
  method          String
}

enum UserRole {
  ADMIN
  CLIENT
}
